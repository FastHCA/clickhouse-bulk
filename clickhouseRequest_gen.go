package main

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ClickhouseRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Params":
			z.Params, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Params")
				return
			}
		case "Query":
			z.Query, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Query")
				return
			}
		case "Content":
			z.Content, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Content")
				return
			}
		case "Count":
			z.Count, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		case "IsInsert":
			z.IsInsert, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsInsert")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ClickhouseRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Params"
	err = en.Append(0x85, 0xa6, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Params)
	if err != nil {
		err = msgp.WrapError(err, "Params")
		return
	}
	// write "Query"
	err = en.Append(0xa5, 0x51, 0x75, 0x65, 0x72, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Query)
	if err != nil {
		err = msgp.WrapError(err, "Query")
		return
	}
	// write "Content"
	err = en.Append(0xa7, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Content)
	if err != nil {
		err = msgp.WrapError(err, "Content")
		return
	}
	// write "Count"
	err = en.Append(0xa5, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Count)
	if err != nil {
		err = msgp.WrapError(err, "Count")
		return
	}
	// write "IsInsert"
	err = en.Append(0xa8, 0x49, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsInsert)
	if err != nil {
		err = msgp.WrapError(err, "IsInsert")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ClickhouseRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Params"
	o = append(o, 0x85, 0xa6, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73)
	o = msgp.AppendString(o, z.Params)
	// string "Query"
	o = append(o, 0xa5, 0x51, 0x75, 0x65, 0x72, 0x79)
	o = msgp.AppendString(o, z.Query)
	// string "Content"
	o = append(o, 0xa7, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.Content)
	// string "Count"
	o = append(o, 0xa5, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.Count)
	// string "IsInsert"
	o = append(o, 0xa8, 0x49, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74)
	o = msgp.AppendBool(o, z.IsInsert)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ClickhouseRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Params":
			z.Params, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Params")
				return
			}
		case "Query":
			z.Query, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Query")
				return
			}
		case "Content":
			z.Content, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Content")
				return
			}
		case "Count":
			z.Count, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		case "IsInsert":
			z.IsInsert, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsInsert")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ClickhouseRequest) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.Params) + 6 + msgp.StringPrefixSize + len(z.Query) + 8 + msgp.StringPrefixSize + len(z.Content) + 6 + msgp.IntSize + 9 + msgp.BoolSize
	return
}
